# -*- coding: utf-8 -*-
"""part3_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rlYW-d3zegOkeMZl_eovrqUM1M2MBPWR

**Exporting libraries**
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pickle
import pandas as pd
import pickle
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from collections import Counter, defaultdict
from operator import itemgetter

drop_list = []

"""**Loading Necessary Functions**"""

def pickleLoad(filename):
    with open(filename, "rb") as f:
        filetype = pickle.load(f)
    return filetype

def pickleUnload(filename,filetype):
    with open(filename, "wb") as f:
        pickle.dump(filetype, f)

def one_hot(df, cols):
    for each in cols:
        try:
            one_hot = pd.get_dummies(df[each], prefix=each,drop_first=True)
            df = df.join(one_hot)
        except:
            continue
    df.drop(cols, axis=1,inplace=True)
    return df

def k_mean_distance(data, cx, cy, i_centroid, cluster_labels):
    distances = [np.sqrt((x-cx)**2+(y-cy)**2) for (x, y) in data[cluster_labels == i_centroid]]
    return np.mean(distances)

"""**Reading the data file**"""

df = pd.read_csv('more_than_50k.csv')
df

"""**Replacing the missing values**"""

df.replace(" ?", np.nan, inplace=True)
df

"""**Displaying columns and % of null values in them**"""

print (df.isnull().mean())

"""**Deleting columns with more than 40% of null values**"""

df = df[df.columns[df.isnull().mean() < 0.4]]
df

"""**Visualising Histograms from columns**"""

i = 0
for title in list(df):
    plt.subplots_adjust(left=0.07, bottom=0.23, right=0.95, top=0.95, wspace=None, hspace=None)
    df[title].value_counts().plot(figsize=(20,10),kind='bar')
    plot_title = str(title)
    plt.title(plot_title)
#     plt.savefig("p3_data/graphs/50k/"+str(i)+"_"+plot_title)
    i+=1

"""**Removing Features with 75% same values**"""

data_size = int(df['GRINST'].size*0.8)
for title in list(df):
    try:
        if (df[title].value_counts()[0] > data_size):
            drop_list.append(title)
    except:
        continue
df.drop(drop_list, axis=1,inplace=True)

"""**Converting Numerical features to 8 bin**"""

for y in df.columns:
    if df[y].dtype == np.int64:
        df[y] = pd.cut(df[y],8)

"""**Converting all the features type to categorical**"""

for title in list(df):
    df[title] = df[title].astype('category',copy=False)

"""**Shape and Type of Categories**"""

print (df.shape)
print (df.dtypes)

"""**Replace Missing Values with column's mode**"""

for column in df.columns:
    df[column].replace(np.nan,df[column].mode()[0], inplace=True)

"""**One hot encoding**"""

df = one_hot(df, list(df))
column_name = list(df)

"""**Graph Plot Cumulative Variance vs Number of Components**"""

pca = PCA().fit(df)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Explained Variance')
plt.show()

"""**Fitting PCA with n=75**"""

pca = PCA(n_components=75)
pca.fit(df)
df_n = pca.transform(df)

"""**Amount of variance each PC has**"""

print((pca.explained_variance_ratio_))

"""**Mapping weights to 1st,2nd,3rd principal component**"""

for i in range(3):
    print ("**** Principal Component - {} ****".format(i+1))
    A = abs(pca.components_[i])
    ranks = np.argsort(A)
    for a in ranks:
        print ("{} - {}".format(column_name[a],A[a]))
    print ("\n\n")

"""**K mean clustering distance**"""

Sum_of_squared_distances = []
K = range(10,24)
for k in K:
    km = KMeans(n_clusters=k)
    km = km.fit(df_n)
    Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

"""**K mean clustering with n = 22**"""

#K mean clustering with n = 22
clusters = 22
kmeans = KMeans(n_clusters=clusters).fit(df_n)
plt.figure('K-means with {} clusters'.format(clusters))
plt.scatter(df_n[:, 0], df_n[:, 1],c=kmeans.labels_)
plt.show()

"""**Calculates % of data points in each cluster**"""

count = 0
proportions = []
cluster_count = Counter(kmeans.labels_)
for a in cluster_count.items():
    count += a[1]
for a in cluster_count.items():
    proportions.append([a[0],round((float(a[1])/float(count))*100.0,2)])
print (sorted(proportions, key=itemgetter(0)))